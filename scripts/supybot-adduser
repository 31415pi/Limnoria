#!/usr/bin/env python

###
# Copyright (c) 2002, Jeremiah Fincher
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#   * Redistributions of source code must retain the above copyright notice,
#     this list of conditions, and the following disclaimer.
#   * Redistributions in binary form must reproduce the above copyright notice,
#     this list of conditions, and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#   * Neither the name of the author of this software nor the name of
#     contributors to this software may be used to endorse or promote products
#     derived from this software without specific prior written consent.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
###

import supybot

import fix
from questions import *

import os
import sys
import optparse

import registry

def main():
    from conf import version
    parser = optparse.OptionParser(usage='Usage: %prog [options] <configFile>',
                                   version='supybot %s' % version)
    parser.add_option('-u', '--username', action='store', default='',
                      dest='name',
                      help='username for the user.')
    parser.add_option('-p', '--password', action='store', default='',
                      dest='password',
                      help='password for the user.')
    parser.add_option('-x', '--hashed', action='store_const', const=1,
                      default=0, dest='hashed',
                      help='hash encrypt the password.')
    parser.add_option('-n', '--plain', action='store_const', const=2,
                      default=0, dest='hashed',
                      help='store the password in plain text.')
    parser.add_option('-c', '--capability', action='append',
                      dest='capabilities', metavar='CAPABILITY',
                      help='capability the user should have; '
                           'this option may be given multiple times.')
    (options, args) = parser.parse_args()
    if len(args) is not 1:
        parser.error('specify the configuration file you\'d like to use.')

    registry.open(args[0])
    import conf
    import log
    import ircdb

    oldLogLevel = conf.supybot.log.level()
    conf.supybot.log.level.set('CRITICAL')

    if not options.name:
        name = ''
        while not name:
            name = something('What is the user\'s name?')
            try:
                # Check to see if the user is already in the database.
                _ = ircdb.users.getUser(name)
                # Uh oh.  That user already exists;
                # otherwise we'd have KeyError'ed.
                output('That user already exists.  Try another name.')
                name = ''
            except KeyError:
                # Good.  No such user exists.  We'll pass.
                pass
    else:
        try:
            # Same as above. We exit here instead.
            _ = ircdb.users.getUser(options.name)
            output('That user already exists.  Try another name.')
            sys.exit(-1)
        except KeyError:
            name = options.name

    if not options.password:
        password = getpass('What is %s\'s password? ' % name)
    else:
        password = options.password
    
    if options.hashed is 0:
        hashed = yn('Do you want the password to be hashed instead of '
                    'storing it as plain text?', default=False)
    elif options.hashed is 1:
        hashed = True
    else:
        hashed = False

    if not options.capabilities:
        capabilities = []
        prompt = 'Would you like to give %s a capability?' % name
        while yn(prompt):
            capabilities.append(anything('What capability?'))
            prompt = 'Would you like to give %s another capability?' % name
    else:
        capabilities = options.capabilities

    (id, user) = ircdb.users.newUser()
    user.name = name
    user.setPassword(password, hashed=hashed)
    for capability in capabilities:
        user.addCapability(capability)
    ircdb.users.setUser(id, user)
    print 'User %s added.' % name
    conf.supybot.log.level.setValue(oldLogLevel)
    registry.close(conf.supybot, args[0])

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        pass
